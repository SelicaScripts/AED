<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FaceBall 2000 WebSim</title>
    
    <!-- Tailwind CSS -->
    <script src="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.js"></script>
    
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    
    <!-- Game fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet">
    
    <style>
        :root {
            --primary-color: #3a7bd5;
            --secondary-color: #00d2ff;
            --danger-color: #ff5370;
            --success-color: #5cd85c;
            --warning-color: #ffcc00;
            --text-color: #e6e6e6;
            --bg-color: #141e30;
            --panel-bg: #1c2940;
            --card-bg: #263550;
            --border-color: #304060;
            --chart-grid: rgba(255, 255, 255, 0.1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            background: linear-gradient(135deg, var(--bg-color) 0%, #243b55 100%);
            color: var(--text-color);
            line-height: 1.6;
            height: 100vh;
            overflow: hidden;
        }

        #app {
            height: 100vh;
            display: flex;
            flex-direction: column;
            padding: 20px;
            overflow: hidden;
        }

        header {
            text-align: center;
            margin-bottom: 20px;
        }

        h1 {
            font-size: 2.5rem;
            background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
            -webkit-background-clip: text;
            background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 5px;
        }

        .subtitle {
            font-size: 1.1rem;
            opacity: 0.8;
        }

        main {
            flex: 1;
            display: flex;
            flex-direction: column;
            gap: 20px;
            overflow-y: auto;
        }

        .dashboard {
            display: grid;
            grid-template-columns: 1fr 2fr;
            gap: 20px;
            margin-bottom: 20px;
        }

        .status-panel, .metrics-panel, .history-panel, .design-panel, .visualization-panel {
            background-color: var(--panel-bg);
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            border: 1px solid var(--border-color);
        }

        .evolution-panel {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 20px;
        }

        h2 {
            margin-bottom: 15px;
            font-size: 1.3rem;
            color: var(--secondary-color);
            border-bottom: 1px solid var(--border-color);
            padding-bottom: 10px;
        }

        .status-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
            padding: 10px;
            background-color: var(--card-bg);
            border-radius: 5px;
        }

        .label {
            font-weight: 600;
        }

        .value {
            font-family: 'Consolas', monospace;
            padding: 2px 6px;
            background: rgba(0, 0, 0, 0.2);
            border-radius: 4px;
        }

        .controls {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }

        button {
            padding: 10px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.2s ease;
        }

        .primary-btn {
            background-color: var(--primary-color);
            color: white;
        }

        .primary-btn:hover {
            background-color: #4a8be5;
        }

        .secondary-btn {
            background-color: var(--card-bg);
            color: var(--text-color);
            border: 1px solid var(--border-color);
        }

        .secondary-btn:hover {
            background-color: #334366;
        }

        .danger-btn {
            background-color: rgba(255, 83, 112, 0.2);
            color: var(--danger-color);
            border: 1px solid var(--danger-color);
        }

        .danger-btn:hover {
            background-color: rgba(255, 83, 112, 0.3);
        }

        button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .metrics-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 15px;
        }

        .metric-card {
            background-color: var(--card-bg);
            padding: 15px;
            border-radius: 6px;
            display: flex;
            flex-direction: column;
            position: relative;
        }

        .metric-name {
            font-weight: 600;
            margin-bottom: 5px;
        }

        .metric-value {
            font-size: 1.5rem;
            font-family: 'Consolas', monospace;
            margin-bottom: 10px;
        }

        .metric-trend {
            position: absolute;
            top: 15px;
            right: 15px;
            font-size: 0.8rem;
            display: flex;
            align-items: center;
            gap: 4px;
        }

        .trend-up {
            color: var(--success-color);
        }

        .trend-down {
            color: var(--danger-color);
        }

        .trend-neutral {
            color: var(--warning-color);
        }

        .chart-container {
            width: 100%;
            height: 250px;
            background-color: var(--card-bg);
            border-radius: 6px;
            padding: 15px;
        }

        .code-diff {
            font-family: 'Consolas', monospace;
            font-size: 0.9rem;
            background-color: var(--card-bg);
            border-radius: 6px;
            padding: 15px;
            overflow: auto;
            height: 250px;
            white-space: pre-wrap;
            line-height: 1.4;
        }

        .preview-container {
            width: 100%;
            height: 400px;
            background-color: var(--card-bg);
            border-radius: 6px;
            position: relative;
            overflow: hidden;
        }

        .placeholder {
            color: rgba(255, 255, 255, 0.5);
            text-align: center;
        }

        .messages {
            position: fixed;
            bottom: 20px;
            right: 20px;
            max-width: 300px;
            z-index: 1000;
        }

        .message {
            padding: 10px 15px;
            margin-bottom: 10px;
            border-radius: 4px;
            animation: fadeIn 0.3s, fadeOut 0.5s 3.5s forwards;
            position: relative;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }

        .info-message {
            background-color: var(--primary-color);
            color: white;
        }

        .success-message {
            background-color: var(--success-color);
            color: white;
        }

        .error-message {
            background-color: var(--danger-color);
            color: white;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        @keyframes fadeOut {
            from { opacity: 1; }
            to { opacity: 0; transform: translateY(-20px); }
        }

        .diff-add {
            background-color: rgba(92, 216, 92, 0.2);
            color: var(--success-color);
        }

        .diff-remove {
            background-color: rgba(255, 83, 112, 0.2);
            color: var(--danger-color);
        }

        .metric-progress {
            height: 6px;
            background-color: rgba(0, 0, 0, 0.2);
            border-radius: 3px;
            overflow: hidden;
            margin-top: auto;
        }

        .metric-progress-bar {
            height: 100%;
            background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
            transition: width 0.3s ease;
        }

        /* FaceBall 2000 Specific Styles */
        #game-canvas {
            width: 100%;
            height: 100%;
            position: absolute;
            top: 0;
            left: 0;
            border-radius: 6px;
            image-rendering: pixelated;
            image-rendering: crisp-edges;
        }

        #hud {
            position: absolute;
            bottom: 10px;
            width: 100%;
            display: flex;
            justify-content: space-between;
            padding: 0 20px;
            font-family: 'Press Start 2P', cursive;
            color: #ffcc00;
            font-size: 14px;
            text-shadow: 2px 2px 0 #000;
            pointer-events: none;
        }

        #game-menu {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background: rgba(0, 0, 0, 0.7);
            font-family: 'Press Start 2P', cursive;
            color: #ffcc00;
            z-index: 10;
        }

        #game-menu h3 {
            font-size: 24px;
            margin-bottom: 30px;
            text-align: center;
            text-shadow: 3px 3px 0 #3a7bd5;
        }

        #game-menu button {
            background: #3a7bd5;
            color: #fff;
            border: none;
            padding: 12px 20px;
            font-family: 'Press Start 2P', cursive;
            font-size: 14px;
            margin: 10px 0;
            cursor: pointer;
            border-radius: 4px;
            box-shadow: 0 4px 0 #2a5a9e;
            transition: all 0.2s;
        }

        #game-menu button:hover {
            transform: translateY(2px);
            box-shadow: 0 2px 0 #2a5a9e;
        }

        #fps {
            position: absolute;
            top: 10px;
            right: 10px;
            background: rgba(0, 0, 0, 0.5);
            color: #fff;
            padding: 5px;
            font-size: 12px;
            border-radius: 4px;
        }

        #minimap {
            position: absolute;
            top: 10px;
            left: 10px;
            background: rgba(0, 0, 0, 0.5);
            border: 1px solid #3a7bd5;
            width: 100px;
            height: 100px;
        }

        @media (max-width: 1024px) {
            .dashboard, .evolution-panel {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div id="app">
        <header>
            <h1>FaceBall 2000 WebSim</h1>
            <div class="subtitle">Autonomous Game Design Evolution</div>
        </header>
        
        <main>
            <div class="dashboard">
                <div class="status-panel">
                    <h2>Evolution Status</h2>
                    <div id="status-container">
                        <div class="status-item">
                            <span class="label">Generation:</span>
                            <span id="generation-count" class="value">0</span>
                        </div>
                        <div class="status-item">
                            <span class="label">Best Score:</span>
                            <span id="best-score" class="value">0.00</span>
                        </div>
                        <div class="status-item">
                            <span class="label">Running:</span>
                            <span id="running-status" class="value">Idle</span>
                        </div>
                    </div>
                    <div class="controls">
                        <button id="start-btn" class="primary-btn">Start Evolution</button>
                        <button id="pause-btn" class="secondary-btn" disabled>Pause</button>
                        <button id="reset-btn" class="danger-btn">Reset</button>
                    </div>
                </div>
                
                <div class="metrics-panel">
                    <h2>Fitness Metrics</h2>
                    <div id="metrics-container"></div>
                </div>
            </div>
            
            <div class="evolution-panel">
                <div class="history-panel">
                    <h2>Evolution History</h2>
                    <div id="history-chart" class="chart-container"></div>
                </div>
                
                <div class="design-panel">
                    <h2>Current Best Design</h2>
                    <div id="design-diff" class="code-diff"></div>
                </div>
            </div>
            
            <div class="visualization-panel">
                <h2>FaceBall 2000 Gameplay</h2>
                <div id="game-preview" class="preview-container">
                    <canvas id="game-canvas"></canvas>
                    <div id="hud">
                        <div id="score">SCORE: 0</div>
                        <div id="health">HEALTH: 100%</div>
                    </div>
                    <div id="fps">FPS: 0</div>
                    <canvas id="minimap"></canvas>
                    <div id="game-menu">
                        <h3>FACEBALL 2000</h3>
                        <button id="start-game">START GAME</button>
                        <button id="settings">SETTINGS</button>
                        <button id="help">HOW TO PLAY</button>
                    </div>
                </div>
            </div>
        </main>
        
        <div id="messages" class="messages" aria-live="polite"></div>
    </div>

    <script>
        // === Game Configuration and Constants ===
        const CONFIG = {
            generationSize: 10,
            selectionTopK: 3,
            mutationRate: 0.1,
            maxGenerations: 100,
            reportInterval: 5
        };

        const INITIAL_METRICS = {
            engagement_time: { value: 2, target: 30, maximize: true, description: "Average time players spend engaged with gameplay (minutes)" },
            retention_rate: { value: 0.3, target: 0.85, maximize: true, description: "Percentage of players returning for another session" },
            difficulty_variance: { value: 3, target: 1.2, minimize: true, description: "Consistency of difficulty throughout gameplay" },
            completion_rate: { value: 10, target: 40, maximize: true, description: "Percentage of players who reach the end state" },
            player_deaths: { value: 5, target: 3, minimize: true, description: "Average player deaths per complete playthrough" },
            narrative_coherence_score: { value: 0.2, target: 0.8, maximize: true, description: "How well the narrative elements connect and create meaning" },
            art_style_consistency: { value: 0.5, target: 0.9, maximize: true, description: "Visual coherence across all game elements" },
            ui_usability_score: { value: 2, target: 4.5, maximize: true, description: "Ease of navigating menus and understanding controls" },
            fun_score: { value: 3, target: 8, maximize: true, description: "Player-reported enjoyment on scale of 1-10" }
        };

        const METRIC_WEIGHTS = {
            engagement_time: 0.20,
            retention_rate: 0.20,
            difficulty_variance: -0.10,
            completion_rate: 0.15,
            player_deaths: -0.05,
            narrative_coherence_score: 0.15,
            art_style_consistency: 0.10,
            ui_usability_score: 0.10,
            fun_score: 0.25
        };

        // === FaceBall 2000 Game Implementation ===
        class FaceBallGame {
            constructor(canvas, minimap) {
                // Canvas setup
                this.canvas = canvas;
                this.ctx = canvas.getContext('2d');
                this.minimap = minimap;
                this.minimapCtx = minimap.getContext('2d');
                
                // Set canvas resolution
                this.resizeCanvas();
                window.addEventListener('resize', () => this.resizeCanvas());
                
                // Game state
                this.isPlaying = false;
                this.score = 0;
                this.health = 100;
                this.level = 1;
                
                // Performance monitoring
                this.lastTime = 0;
                this.fpsCounter = document.getElementById('fps');
                this.fpsArray = [];
                
                // Player position and direction
                this.player = {
                    x: 2, // Starting position
                    y: 2,
                    dir: 0, // Direction angle in radians (0 = East)
                    moveSpeed: 0.08,
                    rotSpeed: 0.06,
                };
                
                // Input handling
                this.keys = {};
                window.addEventListener('keydown', e => this.keys[e.code] = true);
                window.addEventListener('keyup', e => this.keys[e.code] = false);
                
                // Map/level data (1 = wall, 0 = empty)
                this.map = [
                    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
                    [1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1],
                    [1,0,1,0,1,1,1,0,0,1,1,1,0,1,0,1],
                    [1,0,1,0,1,0,0,0,0,0,0,1,0,1,0,1],
                    [1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1],
                    [1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1],
                    [1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1],
                    [1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1],
                    [1,0,1,0,1,1,1,1,1,1,1,1,0,1,0,1],
                    [1,0,1,0,1,0,0,0,0,0,0,1,0,1,0,1],
                    [1,0,1,0,1,0,0,0,0,0,0,1,0,1,0,1],
                    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
                    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
                    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
                    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
                ];
                
                // Enemies
                this.enemies = [
                    { x: 3, y: 3, type: 'basic', speed: 0.02, health: 100, dir: 0 },
                    { x: 12, y: 12, type: 'fast', speed: 0.04, health: 50, dir: 0 },
                    { x: 6, y: 10, type: 'tough', speed: 0.01, health: 200, dir: 0 },
                    { x: 12, y: 3, type: 'basic', speed: 0.02, health: 100, dir: 0 },
                ];
                
                // Collectibles
                this.collectibles = [
                    { x: 5, y: 5, type: 'points', value: 100 },
                    { x: 10, y: 10, type: 'health', value: 25 },
                    { x: 3, y: 12, type: 'points', value: 100 },
                    { x: 12, y: 7, type: 'points', value: 100 },
                ];
                
                // Game metrics (connecting to evolution framework)
                this.gameMetrics = {
                    playTime: 0,         // in seconds
                    deathCount: 0,
                    killCount: 0,
                    collectiblesFound: 0,
                    totalCollectibles: this.collectibles.length,
                    completionProgress: 0,  // 0-100%
                    hitAccuracy: 0,
                    shotsFired: 0,
                    shotsHit: 0
                };
                
                // Initialize game colors based on design parameters
                this.colors = {
                    wall: '#3a7bd5',
                    floor: '#111827',
                    ceiling: '#1f2937',
                    enemy: '#ff5370', 
                    collectible: '#ffcc00'
                };
                
                // Projectiles
                this.projectiles = [];
                this.projectileSpeed = 0.15;
                this.projectileCooldown = 0;
                
                // Game design parameters (evolving)
                this.designParams = {
                    enemySpeed: 1.0,        // Multiplier
                    enemyHealth: 1.0,       // Multiplier
                    playerMoveSpeed: 1.0,   // Multiplier
                    playerRotSpeed: 1.0,    // Multiplier
                    playerDamage: 25,       // Base damage
                    collectibleValue: 1.0,  // Multiplier
                    wallColor: [58, 123, 213],  // RGB
                    enemyColor: [255, 83, 112], // RGB
                    difficultyScaling: 0.1   // How quickly difficulty increases
                };
                
                // Bind game menu buttons
                document.getElementById('start-game').addEventListener('click', () => this.startGame());
                document.getElementById('settings').addEventListener('click', () => this.showSettings());
                document.getElementById('help').addEventListener('click', () => this.showHelp());
            }
            
            resizeCanvas() {
                const container = this.canvas.parentElement;
                this.canvas.width = container.clientWidth;
                this.canvas.height = container.clientHeight;
                
                // Also resize minimap
                this.minimap.width = 100;
                this.minimap.height = 100;
            }
            
            startGame() {
                this.isPlaying = true;
                document.getElementById('game-menu').style.display = 'none';
                this.score = 0;
                this.health = 100;
                this.gameMetrics.playTime = 0;
                this.gameMetrics.deathCount = 0;
                this.gameMetrics.killCount = 0;
                this.gameMetrics.collectiblesFound = 0;
                this.gameMetrics.shotsFired = 0;
                this.gameMetrics.shotsHit = 0;
                
                // Reset player position
                this.player.x = 2;
                this.player.y = 2;
                this.player.dir = 0;
                
                // Reset enemies
                this.enemies = [
                    { x: 3, y: 3, type: 'basic', speed: 0.02, health: 100, dir: 0 },
                    { x: 12, y: 12, type: 'fast', speed: 0.04, health: 50, dir: 0 },
                    { x: 6, y: 10, type: 'tough', speed: 0.01, health: 200, dir: 0 },
                    { x: 12, y: 3, type: 'basic', speed: 0.02, health: 100, dir: 0 },
                ];
                
                // Reset collectibles
                this.collectibles = [
                    { x: 5, y: 5, type: 'points', value: 100 },
                    { x: 10, y: 10, type: 'health', value: 25 },
                    { x: 3, y: 12, type: 'points', value: 100 },
                    { x: 12, y: 7, type: 'points', value: 100 },
                ];
                
                // Start game loop
                requestAnimationFrame(time => this.gameLoop(time));
            }
            
            showSettings() {
                alert("Settings would appear here in a full implementation.");
            }
            
            showHelp() {
                alert("Move: WASD or Arrow Keys\nShoot: Spacebar\nGoal: Collect items and defeat enemies");
            }
            
            updateFPS(deltaTime) {
                const fps = 1000 / deltaTime;
                this.fpsArray.push(fps);
                if (this.fpsArray.length > 30) this.fpsArray.shift();
                
                const avgFPS = this.fpsArray.reduce((sum, value) => sum + value, 0) / this.fpsArray.length;
                this.fpsCounter.textContent = `FPS: ${Math.round(avgFPS)}`;
            }
            
            handleInput(deltaTime) {
                const moveSpeed = this.player.moveSpeed * this.designParams.playerMoveSpeed * deltaTime;
                const rotSpeed = this.player.rotSpeed * this.designParams.playerRotSpeed * deltaTime;
                
                // Rotation
                if (this.keys['ArrowLeft'] || this.keys['KeyA']) {
                    this.player.dir -= rotSpeed;
                }
                if (this.keys['ArrowRight'] || this.keys['KeyD']) {
                    this.player.dir += rotSpeed;
                }
                
                // Movement
                let moveX = 0;
                let moveY = 0;
                
                if (this.keys['ArrowUp'] || this.keys['KeyW']) {
                    moveX = Math.cos(this.player.dir) * moveSpeed;
                    moveY = Math.sin(this.player.dir) * moveSpeed;
                }
                if (this.keys['ArrowDown'] || this.keys['KeyS']) {
                    moveX = -Math.cos(this.player.dir) * moveSpeed;
                    moveY = -Math.sin(this.player.dir) * moveSpeed;
                }
                
                // Collision detection for walls
                if (!this.checkCollision(this.player.x + moveX, this.player.y)) {
                    this.player.x += moveX;
                }
                if (!this.checkCollision(this.player.x, this.player.y + moveY)) {
                    this.player.y += moveY;
                }
                
                // Shooting
                if (this.projectileCooldown > 0) {
                    this.projectileCooldown -= deltaTime;
                }
                
                if (this.keys['Space'] && this.projectileCooldown <= 0) {
                    this.projectiles.push({
                        x: this.player.x,
                        y: this.player.y,
                        dirX: Math.cos(this.player.dir) * this.projectileSpeed,
                        dirY: Math.sin(this.player.dir) * this.projectileSpeed,
                        damage: this.designParams.playerDamage,
                        ttl: 2000 // Time to live in ms
                    });
                    
                    this.projectileCooldown = 300; // 300ms cooldown between shots
                    this.gameMetrics.shotsFired++;
                }
            }
            
            checkCollision(x, y) {
                // Check if the position is inside a wall
                const mapX = Math.floor(x);
                const mapY = Math.floor(y);
                
                if (mapX < 0 || mapX >= this.map[0].length || mapY < 0 || mapY >= this.map.length) {
                    return true; // Out of bounds
                }
                
                return this.map[mapY][mapX] === 1;
            }
            
            updateEnemies(deltaTime) {
                for (let i = 0; i < this.enemies.length; i++) {
                    const enemy = this.enemies[i];
                    
                    // Simple AI - move toward player with pathfinding awareness
                    const dx = this.player.x - enemy.x;
                    const dy = this.player.y - enemy.y;
                    enemy.dir = Math.atan2(dy, dx);
                    
                    // Apply design parameter to speed
                    const speedMultiplier = this.designParams.enemySpeed;
                    const moveSpeed = enemy.speed * speedMultiplier * deltaTime;
                    
                    // Calculate movement with basic pathfinding
                    const moveX = Math.cos(enemy.dir) * moveSpeed;
                    const moveY = Math.sin(enemy.dir) * moveSpeed;
                    
                    // Check collision and move
                    if (!this.checkCollision(enemy.x + moveX, enemy.y)) {
                        enemy.x += moveX;
                    }
                    if (!this.checkCollision(enemy.x, enemy.y + moveY)) {
                        enemy.y += moveY;
                    }
                    
                    // Check if enemy hits player
                    const distToPlayer = Math.hypot(this.player.x - enemy.x, this.player.y - enemy.y);
                    if (distToPlayer < 0.5) {
                        this.health -= 10 * (deltaTime / 1000); // Damage over time when touching
                        
                        if (this.health <= 0) {
                            this.health = 0;
                            this.gameOver();
                        }
                    }
                }
            }
            
            updateProjectiles(deltaTime) {
                for (let i = this.projectiles.length - 1; i >= 0; i--) {
                    const proj = this.projectiles[i];
                    
                    // Move projectile
                    proj.x += proj.dirX * deltaTime;
                    proj.y += proj.dirY * deltaTime;
                    proj.ttl -= deltaTime;
                    
                    // Check wall collision
                    if (this.checkCollision(proj.x, proj.y) || proj.ttl <= 0) {
                        this.projectiles.splice(i, 1);
                        continue;
                    }
                    
                    // Check enemy collision
                    for (let j = this.enemies.length - 1; j >= 0; j--) {
                        const enemy = this.enemies[j];
                        const dist = Math.hypot(proj.x - enemy.x, proj.y - enemy.y);
                        
                        if (dist < 0.5) {
                            enemy.health -= proj.damage;
                            this.projectiles.splice(i, 1);
                            this.gameMetrics.shotsHit++;
                            
                            if (enemy.health <= 0) {
                                this.score += enemy.type === 'basic' ? 100 : (enemy.type === 'fast' ? 150 : 200);
                                this.enemies.splice(j, 1);
                                this.gameMetrics.killCount++;
                            }
                            
                            break;
                        }
                    }
                }
            }
            
            checkCollectibles() {
                for (let i = this.collectibles.length - 1; i >= 0; i--) {
                    const item = this.collectibles[i];
                    const dist = Math.hypot(this.player.x - item.x, this.player.y - item.y);
                    
                    if (dist < 0.5) {
                        if (item.type === 'points') {
                            // Apply design parameter to value
                            const valueMultiplier = this.designParams.collectibleValue;
                            this.score += item.value * valueMultiplier;
                        } else if (item.type === 'health') {
                            this.health = Math.min(100, this.health + item.value);
                        }
                        
                        this.collectibles.splice(i, 1);
                        this.gameMetrics.collectiblesFound++;
                    }
                }
            }
            
            gameOver() {
                this.isPlaying = false;
                this.gameMetrics.deathCount++;
                document.getElementById('game-menu').style.display = 'flex';
                
                // Update evolution metrics
                this.updateEvolutionMetrics();
            }
            
            updateEvolutionMetrics() {
                // Calculate metrics to feed into evolution system
                const playTimeMinutes = this.gameMetrics.playTime / 60;
                const hitAccuracy = this.gameMetrics.shotsFired > 0 ? 
                    this.gameMetrics.shotsHit / this.gameMetrics.shotsFired : 0;
                const completionProgress = (this.gameMetrics.collectiblesFound / this.gameMetrics.totalCollectibles) * 100;
                
                // Update app metrics (this would be connected to the evolution framework)
                if (window.app) {
                    window.app.metrics.engagement_time.value = playTimeMinutes;
                    window.app.metrics.player_deaths.value = this.gameMetrics.deathCount;
                    window.app.metrics.completion_rate.value = completionProgress;
                    window.app.metrics.fun_score.value = (this.score / 500) + (hitAccuracy * 5);
                    window.app.renderUI();
                }
            }
            
            updateGameMetrics(deltaTime) {
                // Update play time
                this.gameMetrics.playTime += deltaTime / 1000;
                
                // Update completion progress
                this.gameMetrics.completionProgress = (this.gameMetrics.collectiblesFound / this.gameMetrics.totalCollectibles) * 100;
                
                // Update hit accuracy
                if (this.gameMetrics.shotsFired > 0) {
                    this.gameMetrics.hitAccuracy = this.gameMetrics.shotsHit / this.gameMetrics.shotsFired;
                }
                
                // Update UI
                document.getElementById('score').textContent = `SCORE: ${this.score}`;
                document.getElementById('health').textContent = `HEALTH: ${Math.floor(this.health)}%`;
            }
            
            applyDesignParameters(params) {
                // Apply design parameters from evolution system
                if (!params) return;
                
                // Override current design params with evolved ones
                Object.assign(this.designParams, params);
                
                // Update colors
                this.colors.wall = `rgb(${this.designParams.wallColor.join(',')})`;
                this.colors.enemy = `rgb(${this.designParams.enemyColor.join(',')})`;
                
                // Update enemy properties
                for (let enemy of this.enemies) {
                    enemy.speed *= this.designParams.enemySpeed;
                }
                
                // Apply player properties
                this.player.moveSpeed = 0.08 * this.designParams.playerMoveSpeed;
                this.player.rotSpeed = 0.06 * this.designParams.playerRotSpeed;
            }
            
            render() {
                const width = this.canvas.width;
                const height = this.canvas.height;
                
                // Clear canvas
                this.ctx.fillStyle = '#000';
                this.ctx.fillRect(0, 0, width, height);
                
                // Draw ceiling
                this.ctx.fillStyle = this.colors.ceiling;
                this.ctx.fillRect(0, 0, width, height / 2);
                
                // Draw floor
                this.ctx.fillStyle = this.colors.floor;
                this.ctx.fillRect(0, height / 2, width, height / 2);
                
                // Raycasting
                for(let x = 0; x < width; x++) {
                    // Calculate ray position and direction
                    const cameraX = 2 * x / width - 1;
                    const rayDirX = Math.cos(this.player.dir) + 0 * cameraX;
                    const rayDirY = Math.sin(this.player.dir) + 0.66 * cameraX; // Field of view adjustment
                    
                    // Which box of the map we're in
                    let mapX = Math.floor(this.player.x);
                    let mapY = Math.floor(this.player.y);
                    
                    // Length of ray from current position to next x or y-side
                    let sideDistX, sideDistY;
                    
                    // Length of ray from one x or y-side to next x or y-side
                    const deltaDistX = Math.abs(1 / rayDirX);
                    const deltaDistY = Math.abs(1 / rayDirY);
                    
                    // What direction to step in x or y direction (either +1 or -1)
                    let stepX, stepY;
                    
                    let hit = 0; // Was there a wall hit?
                    let side = 0; // Was a NS or a EW wall hit?
                    
                    // Calculate step and initial sideDist
                    if (rayDirX < 0) {
                        stepX = -1;
                        sideDistX = (this.player.x - mapX) * deltaDistX;
                    } else {
                        stepX = 1;
                        sideDistX = (mapX + 1.0 - this.player.x) * deltaDistX;
                    }
                    
                    if (rayDirY < 0) {
                        stepY = -1;
                        sideDistY = (this.player.y - mapY) * deltaDistY;
                    } else {
                        stepY = 1;
                        sideDistY = (mapY + 1.0 - this.player.y) * deltaDistY;
                    }
                    
                    // Perform DDA (Digital Differential Analysis)
                    while (hit === 0) {
                        // Jump to next map square, either in x-direction, or in y-direction
                        if (sideDistX < sideDistY) {
                            sideDistX += deltaDistX;
                            mapX += stepX;
                            side = 0;
                        } else {
                            sideDistY += deltaDistY;
                            mapY += stepY;
                            side = 1;
                        }
                        
                        // Check if ray has hit a wall
                        if (mapY < 0 || mapX < 0 || mapY >= this.map.length || mapX >= this.map[0].length) {
                            hit = 1; // Out of bounds
                        } else if (this.map[mapY][mapX] > 0) {
                            hit = 1;
                        }
                    }
                    
                    // Calculate distance projected on camera direction
                    let perpWallDist;
                    if (side === 0) {
                        perpWallDist = (mapX - this.player.x + (1 - stepX) / 2) / rayDirX;
                    } else {
                        perpWallDist = (mapY - this.player.y + (1 - stepY) / 2) / rayDirY;
                    }
                    
                    // Calculate height of line to draw on screen
                    const lineHeight = Math.round(height / perpWallDist);
                    
                    // Calculate lowest and highest pixel to fill
                    let drawStart = Math.max(0, -lineHeight / 2 + height / 2);
                    let drawEnd = Math.min(height, lineHeight / 2 + height / 2);
                    
                    // Choose wall color
                    let wallColor = this.colors.wall;
                    if (side === 1) {
                        // Darken one side of the walls
                        const r = parseInt(wallColor.slice(1, 3), 16) * 0.7;
                        const g = parseInt(wallColor.slice(3, 5), 16) * 0.7;
                        const b = parseInt(wallColor.slice(5, 7), 16) * 0.7;
                        wallColor = `rgb(${r}, ${g}, ${b})`;
                    }
                    
                    // Draw the wall slice
                    this.ctx.fillStyle = wallColor;
                    this.ctx.fillRect(x, drawStart, 1, drawEnd - drawStart);
                }
                
                // Render enemies using sprites
                this.enemies.sort((a, b) => {
                    // Sort from far to near
                    const distA = Math.hypot(a.x - this.player.x, a.y - this.player.y);
                    const distB = Math.hypot(b.x - this.player.x, b.y - this.player.y);
                    return distB - distA;
                });
                
                for (const enemy of this.enemies) {
                    const spriteX = enemy.x - this.player.x;
                    const spriteY = enemy.y - this.player.y;
                    
                    // Transform sprite with the inverse camera matrix
                    // [ planeX   dirX ] -1                                       [ dirY      -dirX ]
                    // [               ]       =  1/(dirX*planeY-dirY*planeX) *   [                 ]
                    // [ planeY   dirY ]                                          [ -planeY  planeX ]
                    
                    const invDet = 1.0 / (0.66 * Math.cos(this.player.dir) - 0 * Math.sin(this.player.dir));
                    
                    const transformX = invDet * (Math.sin(this.player.dir) * spriteX - Math.cos(this.player.dir) * spriteY);
                    const transformY = invDet * (-0.66 * spriteX + 0 * spriteY); // This is the depth
                    
                    const spriteScreenX = Math.floor((width / 2) * (1 + transformX / transformY));
                    
                    // Calculate height and width of the sprite
                    const spriteHeight = Math.abs(Math.floor(height / transformY));
                    const spriteWidth = spriteHeight; // Square sprites
                    
                    // Calculate drawing boundaries
                    const drawStartY = Math.max(0, -spriteHeight / 2 + height / 2);
                    const drawEndY = Math.min(height, spriteHeight / 2 + height / 2);
                    const drawStartX = Math.max(0, spriteScreenX - spriteWidth / 2);
                    const drawEndX = Math.min(width, spriteScreenX + spriteWidth / 2);
                    
                    // Draw the sprite (simple colored rectangle in this example)
                    this.ctx.fillStyle = this.colors.enemy;
                    
                    // Create a simple smiley face
                    const centerX = (drawStartX + drawEndX) / 2;
                    const centerY = (drawStartY + drawEndY) / 2;
                    const radius = spriteWidth / 2;
                    
                    if (transformY > 0 && centerX > 0 && centerX < width && centerY > 0 && centerY < height) {
                        // Draw face background
                        this.ctx.beginPath();
                        this.ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);
                        this.ctx.fill();
                        
                        // Draw eyes
                        this.ctx.fillStyle = '#000';
                        this.ctx.beginPath();
                        this.ctx.arc(centerX - radius/3, centerY - radius/4, radius/6, 0, Math.PI * 2);
                        this.ctx.arc(centerX + radius/3, centerY - radius/4, radius/6, 0, Math.PI * 2);
                        this.ctx.fill();
                        
                        // Draw mouth
                        this.ctx.beginPath();
                        this.ctx.arc(centerX, centerY + radius/5, radius/2, 0, Math.PI);
                        this.ctx.stroke();
                    }
                }
                
                // Render collectibles
                for (const collectible of this.collectibles) {
                    const spriteX = collectible.x - this.player.x;
                    const spriteY = collectible.y - this.player.y;
                    
                    const invDet = 1.0 / (0.66 * Math.cos(this.player.dir) - 0 * Math.sin(this.player.dir));
                    const transformX = invDet * (Math.sin(this.player.dir) * spriteX - Math.cos(this.player.dir) * spriteY);
                    const transformY = invDet * (-0.66 * spriteX + 0 * spriteY);
                    
                    const spriteScreenX = Math.floor((width / 2) * (1 + transformX / transformY));
                    
                    // Calculate dimensions
                    const spriteSize = Math.abs(Math.floor(height / (transformY * 2))); // Smaller than enemies
                    
                    // Calculate drawing boundaries
                    const drawStartY = Math.max(0, -spriteSize / 2 + height / 2);
                    const drawEndY = Math.min(height, spriteSize / 2 + height / 2);
                    const drawStartX = Math.max(0, spriteScreenX - spriteSize / 2);
                    const drawEndX = Math.min(width, spriteScreenX + spriteSize / 2);
                    
                    // Draw the collectible
                    if (transformY > 0) {
                        const centerX = (drawStartX + drawEndX) / 2;
                        const centerY = (drawStartY + drawEndY) / 2;
                        const radius = spriteSize / 2;
                        
                        this.ctx.fillStyle = this.colors.collectible;
                        this.ctx.beginPath();
                        this.ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);
                        this.ctx.fill();
                        
                        // Add star shape for collectible
                        this.ctx.strokeStyle = '#fff';
                        this.ctx.beginPath();
                        for (let i = 0; i < 5; i++) {
                            const angle = (Math.PI * 2 / 5) * i - Math.PI / 2;
                            const x = centerX + Math.cos(angle) * radius * 0.7;
                            const y = centerY + Math.sin(angle) * radius * 0.7;
                            if (i === 0) this.ctx.moveTo(x, y);
                            else this.ctx.lineTo(x, y);
                        }
                        this.ctx.closePath();
                        this.ctx.stroke();
                    }
                }
                
                // Render projectiles
                for (const proj of this.projectiles) {
                    const spriteX = proj.x - this.player.x;
                    const spriteY = proj.y - this.player.y;
                    
                    const invDet = 1.0 / (0.66 * Math.cos(this.player.dir) - 0 * Math.sin(this.player.dir));
                    const transformX = invDet * (Math.sin(this.player.dir) * spriteX - Math.cos(this.player.dir) * spriteY);
                    const transformY = invDet * (-0.66 * spriteX + 0 * spriteY);
                    
                    const spriteScreenX = Math.floor((width / 2) * (1 + transformX / transformY));
                    
                    // Small projectile
                    const projSize = Math.abs(Math.floor(height / (transformY * 4)));
                    
                    if (transformY > 0) {
                        this.ctx.fillStyle = '#fff';
                        this.ctx.beginPath();
                        this.ctx.arc(spriteScreenX, height / 2, projSize, 0, Math.PI * 2);
                        this.ctx.fill();
                    }
                }
                
                // Draw minimap
                this.minimapCtx.clearRect(0, 0, 100, 100);
                this.minimapCtx.fillStyle = 'rgba(0, 0, 0, 0.7)';
                this.minimapCtx.fillRect(0, 0, 100, 100);
                
                const mapSize = this.map.length;
                const tileSize = 100 / mapSize;
                
                // Draw walls
                for (let y = 0; y < mapSize; y++) {
                    for (let x = 0; x < mapSize; x++) {
                        if (this.map[y][x] === 1) {
                            this.minimapCtx.fillStyle = this.colors.wall;
                            this.minimapCtx.fillRect(x * tileSize, y * tileSize, tileSize, tileSize);
                        }
                    }
                }
                
                // Draw enemies
                for (const enemy of this.enemies) {
                    this.minimapCtx.fillStyle = this.colors.enemy;
                    this.minimapCtx.beginPath();
                    this.minimapCtx.arc(enemy.x * tileSize, enemy.y * tileSize, tileSize / 2, 0, Math.PI * 2);
                    this.minimapCtx.fill();
                }
                
                // Draw collectibles
                for (const item of this.collectibles) {
                    this.minimapCtx.fillStyle = this.colors.collectible;
                    this.minimapCtx.beginPath();
                    this.minimapCtx.arc(item.x * tileSize, item.y * tileSize, tileSize / 3, 0, Math.PI * 2);
                    this.minimapCtx.fill();
                }
                
                // Draw player
                this.minimapCtx.fillStyle = '#00ff00';
                this.minimapCtx.beginPath();
                this.minimapCtx.arc(this.player.x * tileSize, this.player.y * tileSize, tileSize / 2, 0, Math.PI * 2);
                this.minimapCtx.fill();
                
                // Draw direction line
                this.minimapCtx.strokeStyle = '#00ff00';
                this.minimapCtx.beginPath();
                this.minimapCtx.moveTo(this.player.x * tileSize, this.player.y * tileSize);
                this.minimapCtx.lineTo(
                    (this.player.x + Math.cos(this.player.dir)) * tileSize,
                    (this.player.y + Math.sin(this.player.dir)) * tileSize
                );
                this.minimapCtx.stroke();
            }
            
            gameLoop(currentTime) {
                if (!this.isPlaying) return;
                
                const deltaTime = (currentTime - this.lastTime) || 16.67;
                this.lastTime = currentTime;
                
                this.updateFPS(deltaTime);
                
                if (this.isPlaying) {
                    this.handleInput(deltaTime);
                    this.updateEnemies(deltaTime);
                    this.updateProjectiles(deltaTime);
                    this.checkCollectibles();
                    this.updateGameMetrics(deltaTime);
                    this.render();
                    
                    // Check win condition
                    if (this.enemies.length === 0 && this.collectibles.length === 0) {
                        this.score += 1000;
                        alert(`Level ${this.level} completed! Score: ${this.score}`);
                        this.level++;
                        this.startGame(); // Start next level
                    }
                    
                    requestAnimationFrame(time => this.gameLoop(time));
                }
            }
        }
        
        // === Evolution Framework Classes ===
        class ChartManager {
            constructor(historyChartEl) {
                this.historyChartEl = historyChartEl;
                this.charts = {};
                if (typeof Chart !== 'undefined') {
                    this.initCharts();
                } else {
                    console.error('Chart.js not loaded. Charts will not be initialized.');
                    this.historyChartEl.innerHTML = '<p style="color:var(--danger-color);">Error: Chart.js failed to load. Charts unavailable.</p>';
                }
            }
            
            initCharts() {
                const ctx = document.createElement('canvas');
                this.historyChartEl.innerHTML = '';
                this.historyChartEl.appendChild(ctx);
                
                this.charts.history = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: [],
                        datasets: [
                            {
                                label: 'Best Score',
                                data: [],
                                borderColor: 'var(--primary-color)',
                                backgroundColor: 'rgba(58, 123, 213, 0.1)',
                                fill: true,
                                tension: 0.4
                            },
                            {
                                label: 'Average Score',
                                data: [],
                                borderColor: 'var(--secondary-color)',
                                borderDash: [5, 5],
                                backgroundColor: 'transparent',
                                tension: 0.4
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            x: {
                                title: { display: true, text: 'Generation', color: 'rgba(255, 255, 255, 0.7)' },
                                grid: { color: 'var(--chart-grid)' },
                                ticks: { color: 'rgba(255, 255, 255, 0.7)' }
                            },
                            y: {
                                title: { display: true, text: 'Fitness Score', color: 'rgba(255, 255, 255, 0.7)' },
                                grid: { color: 'var(--chart-grid)' },
                                ticks: { color: 'rgba(255, 255, 255, 0.7)' }
                            }
                        },
                        plugins: {
                            legend: { labels: { color: 'rgba(255, 255, 255, 0.7)' } }
                        }
                    }
                });
            }
            
            updateHistoryChart(history) {
                if (!this.charts.history || typeof Chart === 'undefined') return;
                
                const labels = history.map(h => h.generation);
                const bestScores = history.map(h => h.best_score);
                const avgScores = history.map(h => h.avg_score);
                
                this.charts.history.data.labels = labels;
                this.charts.history.data.datasets[0].data = bestScores;
                this.charts.history.data.datasets[1].data = avgScores;
                this.charts.history.update('none');
            }
        }
        
        class MetricsRenderer {
            constructor(metricsContainer) {
                this.metricsContainer = metricsContainer;
            }
            
            render(metrics, history) {
                this.metricsContainer.innerHTML = '';
                
                Object.entries(metrics).forEach(([key, metricData]) => {
                    const card = document.createElement('div');
                    card.className = 'metric-card';
                    
                    const name = document.createElement('div');
                    name.className = 'metric-name';
                    name.title = metricData.description || 'No description available';
                    name.textContent = key.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
                    
                    const valueDiv = document.createElement('div');
                    valueDiv.className = 'metric-value';
                    valueDiv.textContent = typeof metricData.value === 'number' 
                        ? metricData.value.toFixed(2) 
                        : String(metricData.value);
                    
                    const progress = document.createElement('div');
                    progress.className = 'metric-progress';
                    const progressBar = document.createElement('div');
                    progressBar.className = 'metric-progress-bar';
                    
                    let progressValue = 0;
                    if (metricData.target !== 0 && metricData.target != null) {
                        if (metricData.maximize) {
                            progressValue = Math.min(metricData.value / metricData.target, 1);
                        } else {
                            progressValue = 1 - (metricData.value / metricData.target);
                        }
                        progressValue = Math.max(0, Math.min(progressValue, 1));
                    }
                    progressBar.style.width = `${progressValue * 100}%`;
                    progress.appendChild(progressBar);
                    
                    if (history.length > 1) {
                        const trendDiv = document.createElement('div');
                        trendDiv.className = 'metric-trend';
                        
                        const prevGenerationMetrics = history[history.length - 2]?.metrics;
                        if (prevGenerationMetrics && prevGenerationMetrics[key]) {
                            const prevValue = prevGenerationMetrics[key].value;
                            const currentValue = metricData.value;
                            const delta = currentValue - prevValue;
                            
                            const epsilon = 0.001;
                            
                            if (delta > epsilon && metricData.maximize || delta < -epsilon && !metricData.maximize) {
                                trendDiv.innerHTML = '↑';
                                trendDiv.classList.add('trend-up');
                            } else if (delta < -epsilon && metricData.maximize || delta > epsilon && !metricData.maximize) {
                                trendDiv.innerHTML = '↓';
                                trendDiv.classList.add('trend-down');
                            } else {
                                trendDiv.innerHTML = '→';
                                trendDiv.classList.add('trend-neutral');
                            }
                            card.appendChild(trendDiv);
                        }
                    }
                    
                    card.appendChild(name);
                    card.appendChild(valueDiv);
                    card.appendChild(progress);
                    this.metricsContainer.appendChild(card);
                });
            }
        }
        
        class DesignRenderer {
            constructor(designDiffEl) {
                this.designDiffEl = designDiffEl;
            }
            
            render(currentBestDesign, generation) {
                if (!currentBestDesign) {
                    this.designDiffEl.innerHTML = '<div>No design available yet.</div>';
                    return;
                }
                
                let diffHtml = `<div class="diff-header">Best of Generation: ${currentBestDesign.generation || generation}, Score: ${currentBestDesign.score.toFixed(3)}</div>`;
                
                if (currentBestDesign.diffs && currentBestDesign.diffs.length > 0) {
                    for (const diff of currentBestDesign.diffs) {
                        diffHtml += `<div class="diff-block">`;
                        const fileName = diff.file.replace(/</g, "&lt;").replace(/>/g, "&gt;");
                        diffHtml += `<div class="diff-file">${fileName}</div>`;
                        
                        const lines = diff.content.split('\n');
                        for (const line of lines) {
                            const safeLine = line.replace(/</g, "&lt;").replace(/>/g, "&gt;");
                            if (line.startsWith('+')) {
                                diffHtml += `<div class="diff-add">${safeLine}</div>`;
                            } else if (line.startsWith('-')) {
                                diffHtml += `<div class="diff-remove">${safeLine}</div>`;
                            } else {
                                diffHtml += `<div>${safeLine}</div>`;
                            }
                        }
                        diffHtml += `</div>`;
                    }
                } else {
                    diffHtml += `<div>No specific design changes (diffs) recorded for this generation's best.</div>`;
                }
                
                this.designDiffEl.innerHTML = diffHtml;
                
                // Apply design changes to game if it's initialized
                if (window.game && currentBestDesign.metrics) {
                    // Map metrics to game parameters
                    const designParams = {
                        enemySpeed: 1 + (currentBestDesign.metrics.difficulty_variance.value - 1) * 0.2,
                        enemyHealth: 1 + (currentBestDesign.metrics.player_deaths.value / 5) * 0.5,
                        playerMoveSpeed: 0.8 + (currentBestDesign.metrics.ui_usability_score.value / 5) * 0.4,
                        playerRotSpeed: 0.9 + (currentBestDesign.metrics.ui_usability_score.value / 5) * 0.2,
                        playerDamage: 20 + (currentBestDesign.metrics.fun_score.value / 8) * 30,
                        collectibleValue: 0.8 + (currentBestDesign.metrics.completion_rate.value / 100) * 0.4,
                        wallColor: [
                            58 + (currentBestDesign.metrics.art_style_consistency.value * 50),
                            123 - (currentBestDesign.metrics.narrative_coherence_score.value * 30),
                            213 * currentBestDesign.metrics.art_style_consistency.value
                        ],
                        enemyColor: [
                            255 * currentBestDesign.metrics.fun_score.value / 10,
                            83 * (1 - currentBestDesign.metrics.difficulty_variance.value / 3),
                            112 + (currentBestDesign.metrics.completion_rate.value / 100) * 30
                        ],
                        difficultyScaling: 0.05 + (currentBestDesign.metrics.player_deaths.value / 10) * 0.1
                    };
                    
                    // Apply these params to the game
                    window.game.applyDesignParameters(designParams);
                }
            }
        }
        
        function calculateFitness(metrics) {
            let fitnessScore = 0;
            
            Object.entries(metrics).forEach(([key, currentMetricInstance]) => {
                const weight = METRIC_WEIGHTS[key];
                const metricConfig = INITIAL_METRICS[key];
                
                if (weight === undefined || metricConfig === undefined) {
                    return;
                }
                
                let normalizedValue;
                const value = currentMetricInstance.value;
                const target = metricConfig.target;
                
                if (target === 0) {
                    normalizedValue = (metricConfig.maximize ? (value > 0 ? 1 : 0) : (value === 0 ? 1 : 0));
                } else {
                    if (metricConfig.maximize) {
                        normalizedValue = Math.min(value / target, 1.0);
                    } else {
                        normalizedValue = Math.max(0, 1 - (value / target));
                    }
                }
                
                fitnessScore += normalizedValue * weight;
            });
            
            return fitnessScore;
        }
        
        function generateRandomDiffs() {
            const files = [
                'src/levels/level_1.json',
                'src/game_mechanics.js',
                'src/enemy_ai.js', 
                'src/player_controller.js',
                'src/faceball_graphics.js'
            ];
            
            const numDiffs = Math.floor(Math.random() * 3) + 1;
            const diffs = [];
            
            for (let i = 0; i < numDiffs; i++) {
                const file = files[Math.floor(Math.random() * files.length)];
                let content = '';
                
                content += `--- a/${file}\n`;
                content += `+++ b/${file}\n`;
                content += `@@ -${Math.floor(Math.random() * 100) + 1},5 +${Math.floor(Math.random() * 100) + 1},6 @@\n`;
                
                // FaceBall 2000 specific code additions/removals
                if (file.includes('level')) {
                    content += `- "enemyCount": ${Math.floor(Math.random() * 5) + 3},\n`;
                    content += `+ "enemyCount": ${Math.floor(Math.random() * 7) + 1},\n`;
                    content += `- "collectibleDensity": ${(Math.random() * 0.5 + 0.1).toFixed(2)},\n`;
                    content += `+ "collectibleDensity": ${(Math.random() * 0.7 + 0.2).toFixed(2)},\n`;
                } else if (file.includes('enemy_ai')) {
                    content += `- const ENEMY_SPEED = ${(Math.random() * 0.1 + 0.01).toFixed(3)};\n`;
                    content += `+ const ENEMY_SPEED = ${(Math.random() * 0.1 + 0.02).toFixed(3)};\n`;
                    content += `- const ENEMY_AWARENESS = ${Math.floor(Math.random() * 5) + 3};\n`;
                    content += `+ const ENEMY_AWARENESS = ${Math.floor(Math.random() * 8) + 2};\n`;
                } else if (file.includes('player_controller')) {
                    content += `- this.moveSpeed = ${(Math.random() * 0.1 + 0.05).toFixed(3)};\n`;
                    content += `+ this.moveSpeed = ${(Math.random() * 0.12 + 0.06).toFixed(3)};\n`;
                    content += `- const WEAPON_DAMAGE = ${Math.floor(Math.random() * 30) + 10};\n`;
                    content += `+ const WEAPON_DAMAGE = ${Math.floor(Math.random() * 40) + 15};\n`;
                } else if (file.includes('faceball_graphics')) {
                    content += `- const WALL_COLOR = '#3a7bd5';\n`;
                    content += `+ const WALL_COLOR = '#${Math.floor(Math.random() * 16777215).toString(16).padStart(6, '0')}';\n`;
                    content += `- const FLOOR_TEXTURE = 'checker';\n`;
                    content += `+ const FLOOR_TEXTURE = 'grid';\n`;
                } else {
                    content += `- const FUN_FACTOR = ${(Math.random() * 0.5 + 0.5).toFixed(2)};\n`;
                    content += `+ const FUN_FACTOR = ${(Math.random() * 0.7 + 0.6).toFixed(2)};\n`;
                    content += `- difficultyLevel: ${Math.floor(Math.random() * 3) + 1},\n`;
                    content += `+ difficultyLevel: ${Math.floor(Math.random() * 5) + 1},\n`;
                }
                
                diffs.push({ file, content });
            }
            
            return diffs;
        }
        
        class EvolutionEngine {
            constructor(app) {
                this.app = app;
                this.running = false;
            }
            
            async simulateGeneration() {
                this.app.generation++;
                
                const populationSize = CONFIG.generationSize;
                const designs = [];
                
                for (let i = 0; i < populationSize; i++) {
                    const design = {
                        generation: this.app.generation,
                        design_id: `design_${this.app.generation}_${i}`,
                        metrics: JSON.parse(JSON.stringify(this.app.metrics)),
                        diffs: generateRandomDiffs(),
                        score: 0
                    };
                    
                    if (this.app.history.length > 0 && this.app.history[this.app.history.length - 1].metrics) {
                        const prevBestMetrics = this.app.history[this.app.history.length - 1].metrics;
                        
                        Object.keys(design.metrics).forEach(key => {
                            const metric = design.metrics[key];
                            const prevMetricData = prevBestMetrics[key];
                            
                            if (prevMetricData === undefined) {
                                metric.value = Math.random() * metric.target;
                                return;
                            }
                            
                            const prevValue = prevMetricData.value;
                            const variationRange = (metric.target || 1) * CONFIG.mutationRate;
                            const variation = (Math.random() * 2 - 1) * variationRange;
                            
                            let newValue;
                            const improvementBiasFactor = 0.1;
                            const bias = Math.random() * (metric.target || 1) * improvementBiasFactor;
                            
                            if (metric.maximize) {
                                newValue = prevValue + variation + bias;
                            } else {
                                newValue = prevValue + variation - bias;
                            }
                            
                            metric.value = Math.max(0, newValue);
                            if (key === "retention_rate" || key === "narrative_coherence_score" || key === "art_style_consistency") {
                                metric.value = Math.min(metric.value, 1);
                            }
                        });
                    } else {
                        Object.keys(design.metrics).forEach(key => {
                            const metric = design.metrics[key];
                            metric.value = Math.random() * (metric.target || 1);
                            if (key === "retention_rate" || key === "narrative_coherence_score" || key === "art_style_consistency") {
                                metric.value = Math.min(metric.value, 1);
                            }
                        });
                    }
                    
                    design.score = calculateFitness(design.metrics);
                    designs.push(design);
                }
                
                designs.sort((a, b) => b.score - a.score);
                const topDesigns = designs.slice(0, CONFIG.selectionTopK);
                
                if (topDesigns.length === 0) {
                    console.warn("No top designs selected.");
                    this.app.showMessage("Warning: No top designs identified in this generation.", "error");
                    return;
                }
                
                const bestDesignOfGeneration = topDesigns[0];
                
                if (bestDesignOfGeneration.score > this.app.bestScore) {
                    this.app.bestScore = bestDesignOfGeneration.score;
                }
                
                const avgScore = designs.reduce((sum, d) => sum + d.score, 0) / (designs.length || 1);
                
                this.app.metrics = JSON.parse(JSON.stringify(bestDesignOfGeneration.metrics));
                
                const historyEntry = {
                    generation: this.app.generation,
                    best_score: this.app.bestScore,
                    avg_score: avgScore,
                    metrics: JSON.parse(JSON.stringify(this.app.metrics))
                };
                this.app.history.push(historyEntry);
                
                // Save current best design
                this.app.currentBestDesign = bestDesignOfGeneration;
                this.app.renderUI();
                
                // Apply design parameters to game
                if (window.game) {
                    const designParams = {
                        enemySpeed: 1 + (bestDesignOfGeneration.metrics.difficulty_variance.value - 1) * 0.2,
                        enemyHealth: 1 + (bestDesignOfGeneration.metrics.player_deaths.value / 5) * 0.5,
                        playerMoveSpeed: 0.8 + (bestDesignOfGeneration.metrics.ui_usability_score.value / 5) * 0.4,
                        playerRotSpeed: 0.9 + (bestDesignOfGeneration.metrics.ui_usability_score.value / 5) * 0.2,
                        playerDamage: 20 + (bestDesignOfGeneration.metrics.fun_score.value / 8) * 30,
                        collectibleValue: 0.8 + (bestDesignOfGeneration.metrics.completion_rate.value / 100) * 0.4,
                        wallColor: [
                            58 + (bestDesignOfGeneration.metrics.art_style_consistency.value * 50),
                            123 - (bestDesignOfGeneration.metrics.narrative_coherence_score.value * 30),
                            213 * bestDesignOfGeneration.metrics.art_style_consistency.value
                        ],
                        enemyColor: [
                            255 * bestDesignOfGeneration.metrics.fun_score.value / 10,
                            83 * (1 - bestDesignOfGeneration.metrics.difficulty_variance.value / 3),
                            112 + (bestDesignOfGeneration.metrics.completion_rate.value / 100) * 30
                        ],
                        difficultyScaling: 0.05 + (bestDesignOfGeneration.metrics.player_deaths.value / 10) * 0.1
                    };
                    
                    window.game.applyDesignParameters(designParams);
                }
            }
            
            async runEvolution() {
                while (this.running && this.app.generation < CONFIG.maxGenerations) {
                    await this.simulateGeneration();
                    
                    if (this.app.generation % CONFIG.reportInterval === 0) {
                        this.generateReport();
                    }
                    
                    await new Promise(resolve => setTimeout(resolve, 1000));
                }
                
                if (!this.running && this.app.generation < CONFIG.maxGenerations) {
                    // Evolution was paused by user
                } else if (this.app.generation >= CONFIG.maxGenerations) {
                    this.app.showMessage('Reached maximum generations.', 'success');
                    this.app.pauseEvolution();
                }
            }
            
            generateReport() {
                if (this.app.history.length === 0) return;
                const lastEntry = this.app.history[this.app.history.length - 1];
                
                console.log(`---- Generation ${this.app.generation} Report ----`);
                console.log(`Best Score: ${lastEntry.best_score.toFixed(3)}`);
                console.log(`Average Score: ${lastEntry.avg_score.toFixed(3)}`);
                console.log('Key Metrics (from current best):');
                
                Object.entries(this.app.metrics).forEach(([key, metric]) => {
                    console.log(`  ${key.padEnd(25)}: ${typeof metric.value === 'number' ? metric.value.toFixed(2) : metric.value} (Target: ${metric.target})`);
                });
                console.log('------------------------------------');
            }
        }
        
        // Main App class
        class GameEvoApp {
            constructor() {
                this.running = false;
                this.generation = 0;
                this.bestScore = 0;
                this.history = [];
                this.currentBestDesign = null;
                this.metrics = JSON.parse(JSON.stringify(INITIAL_METRICS));
                
                this.initElements();
                this.initEventListeners();
                
                this.chartManager = new ChartManager(this.historyChartEl);
                this.metricsRenderer = new MetricsRenderer(this.metricsContainer);
                this.designRenderer = new DesignRenderer(this.designDiffEl);
                this.evolutionEngine = new EvolutionEngine(this);
                
                // Set up the game
                const canvas = document.getElementById('game-canvas');
                const minimap = document.getElementById('minimap');
                this.game = new FaceBallGame(canvas, minimap);
                window.game = this.game; // Make it accessible globally
                
                // Make app accessible to game
                window.app = this;
                
                this.renderMetrics();
            }
            
            initElements() {
                this.generationEl = document.getElementById('generation-count');
                this.bestScoreEl = document.getElementById('best-score');
                this.runningStatusEl = document.getElementById('running-status');
                
                this.startBtn = document.getElementById('start-btn');
                this.pauseBtn = document.getElementById('pause-btn');
                this.resetBtn = document.getElementById('reset-btn');
                
                this.metricsContainer = document.getElementById('metrics-container');
                this.designDiffEl = document.getElementById('design-diff');
                this.historyChartEl = document.getElementById('history-chart');
                this.messagesEl = document.getElementById('messages');
                this.gamePreviewEl = document.getElementById('game-preview');
            }
            
            initEventListeners() {
                this.startBtn.addEventListener('click', () => this.startEvolution());
                this.pauseBtn.addEventListener('click', () => this.pauseEvolution());
                this.resetBtn.addEventListener('click', () => this.resetEvolution());
            }
            
            showMessage(text, type = 'info') {
                const message = document.createElement('div');
                message.className = `message ${type}-message`;
                message.textContent = text;
                
                this.messagesEl.appendChild(message);
                
                setTimeout(() => {
                    if (message.parentNode === this.messagesEl) {
                        this.messagesEl.removeChild(message);
                    }
                }, 4000);
            }
            
            renderUI() {
                this.generationEl.textContent = this.generation;
                this.bestScoreEl.textContent = this.bestScore.toFixed(2);
                this.runningStatusEl.textContent = this.running ? 'Running' : 'Idle';
                this.runningStatusEl.style.color = this.running ? 'var(--success-color)' : 'var(--text-color)';
                
                this.startBtn.disabled = this.running;
                this.pauseBtn.disabled = !this.running;
                
                this.renderMetrics();
                this.updateHistoryChart();
                this.renderBestDesign();
            }
            
            renderMetrics() {
                this.metricsRenderer.render(this.metrics, this.history);
            }
            
            updateHistoryChart() {
                this.chartManager.updateHistoryChart(this.history);
            }
            
            renderBestDesign() {
                this.designRenderer.render(this.currentBestDesign, this.generation);
            }
            
            startEvolution() {
                if (this.running) return;
                
                this.running = true;
                this.evolutionEngine.running = true;
                this.startBtn.disabled = true;
                this.pauseBtn.disabled = false;
                this.runningStatusEl.textContent = 'Running';
                this.runningStatusEl.style.color = 'var(--success-color)';
                
                this.showMessage('Evolution process started.', 'info');
                this.evolutionEngine.runEvolution();
            }
            
            pauseEvolution() {
                if (!this.running) return;
                
                this.running = false;
                this.evolutionEngine.running = false;
                this.startBtn.disabled = false;
                this.pauseBtn.disabled = true;
                this.runningStatusEl.textContent = 'Paused';
                this.runningStatusEl.style.color = 'var(--warning-color)';
                
                this.showMessage('Evolution process paused.', 'info');
            }
            
            resetEvolution() {
                if (this.running) {
                    this.pauseEvolution();
                }
                
                if (!confirm('Are you sure you want to reset the evolution process? All progress will be lost.')) {
                    return;
                }
                
                this.generation = 0;
                this.bestScore = 0;
                this.history = [];
                this.metrics = JSON.parse(JSON.stringify(INITIAL_METRICS));
                this.currentBestDesign = null;
                
                this.designDiffEl.textContent = 'No design available yet';
                this.renderUI();
                
                this.showMessage('Evolution process reset.', 'info');
            }
        }
        
        document.addEventListener('DOMContentLoaded', () => {
            const app = new GameEvoApp();
        });
    </script>
</body>
</html>
